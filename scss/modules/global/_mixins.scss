// 
// Global Mixins and Functions
// ===========================

// TODO: use Sass 3.3 maps
@mixin add-theme(
    $module,
    $theme: 'default'
) {
    $themes: append($themes, ($module, $theme));
}

@mixin theme($color) {
    @include foreground-color($color);

    background-color: $color;
}

// Transition Mixin
@mixin transition(
    $property: all,
    $transition-duration: $transition-duration,
    $transition-timing-function: $transition-timing-function
) {
    @include transition-property($property);
    @include transition-duration($transition-duration);
    @include transition-timing-function($transition-timing-function);
}

@mixin translate(
    $horizontal: false,
    $vertical: false
) {
    @if $vertical and $horizontal {
        @include experimental(transform, translateX($horizontal) translateY($vertical));
    } @else {    
        @if $vertical {
            @include experimental(transform, translateY($vertical));
        }

        @if $horizontal {
            @include experimental(transform, translateX($horizontal));
        }
    }
}

@mixin valign($position, $selector: false) {
    display: table;

    $_selector: '> * ';

    @if $selector {
        $_selector: $selector;
    }

    #{$_selector} {
        display: table-cell;
        vertical-align: $position;
    }
}

@mixin valign-all($position, $selector: false) {
    > * {
        @include valign($position, $selector);
    }
}

@function is-integer($number) {
    @return $number == round($number);
}

@function fraction-inverse($fraction) {
    @debug $fraction;

    @return nth($fraction, 2) / nth($fraction, 1);
}

@function fraction-value($fraction, $multiplier: 1) {
    @return nth($fraction, 1) * $multiplier / nth($fraction, 2);
}

@function grid-span(
    $span,
    $gutter: false
) {
    $numerator: 1;
    $denominator: 1;

    @if type_of($span) == list {
        $numerator: nth($span, 1);
        $denominator: nth($span, 2);
    } @else if $span == auto or index(('%', 'px', 'em', 'rem'), unit($span)) {
        @return $span;
    } @else if round($span) == $span and unit($span) == '' and $span > 0 {
        $numerator: $span;
        $denominator: $grid-columns;
    } @else {
        @return percentage($span);
    }

    @if $gutter {        
        @return calc(#{$numerator} * ((100% - #{$gutter * ($denominator - 1)}) / #{$denominator}) + (#{($numerator - 1) * $gutter}));
    } @else {
        @return percentage($numerator / $denominator);
    }
}

@function column-width(
    $columns,
    $gutter: false
) {
    @return grid-span($columns, $gutter);
}

@function column-offset-width(
    $columns,
    $gutter: false
) {
    @return grid-span($columns, $gutter);
}

@function row-height($rows...) {
    // This is (currently) the same result as column-width
    @return column-width($rows...);
}

