// 
// Global Mixins and Functions
// ===========================

@mixin environment($name: all) {
    $environments: if(type-of($name) == list, $name, ($name));

    @if index($environments, $environment) or $name == all {
        @content;
    }
}

@mixin export($name) {
    $import-environment: all;
    $import-component: false;

    @if type-of($components) == string
        and index(('all', $name), $components) {
        $import-component: true;
    } @else if type-of($components) == list {
        $import-component: if(index($components, $name), true, false);
    } @else if type-of($components) == map {
        $import-environment: map-get($components, $name);
        $import-component: if($import-environment, true, false);
    }

    $environment: if($import-environment, $import-environment, all);

    @if $import-component {    
        @include environment($import-environment) {
            @content;
        }
    }
}

@mixin media-extend(
    $selector,
    $extend: true
) {
    @if $extend {
        @at-root (without: media) {
            @extend #{$selector};
        }
    }
}

@mixin theme($color) {
    @include foreground-color($color);

    background-color: $color;
}

// Transition Mixin
@mixin transition(
    $property: all,
    $transition-duration: $transition-duration,
    $transition-timing-function: $transition-timing-function
) {
    transition-property: $property;
    transition-duration: $transition-duration;
    transition-timing-function: $transition-timing-function;
}

@mixin translate(
    $horizontal: false,
    $vertical: false
) {
    @if $vertical and $horizontal {
        @include experimental(transform, translateX($horizontal) translateY($vertical));
    } @else {    
        @if $vertical {
            @include experimental(transform, translateY($vertical));
        }

        @if $horizontal {
            @include experimental(transform, translateX($horizontal));
        }
    }
}

@mixin valign($position, $selector: false) {
    display: table;

    $_selector: '> * ';

    @if $selector {
        $_selector: $selector;
    }

    #{$_selector} {
        display: table-cell;
        vertical-align: $position;
    }
}

@mixin valign-all($position, $selector: false) {
    > * {
        @include valign($position, $selector);
    }
}

@function is-integer($number) {
    @return $number == round($number);
}

@function fraction-value($fraction, $multiplier: 1) {
    @if type-of($fraction) == number {
        @return $fraction * $multiplier;
    } @else {
        @return nth($fraction, 1) * $multiplier / nth($fraction, 2);
    }
}

@function fraction-inverse($fraction) {
    @return 1 / fraction-value($fraction);
}

@function grid-span(
    $span,
    $gutter: false
) {
    $numerator: 1;
    $denominator: 1;

    @if type_of($span) == list {
        $numerator: nth($span, 1);
        $denominator: nth($span, 2);
    } @else if $span == auto or index(('%', 'px', 'em', 'rem'), unit($span)) {
        @return $span;
    } @else if round($span) == $span and unit($span) == '' and $span > 0 {
        $numerator: $span;
        $denominator: $grid-columns;
    } @else {
        @return percentage($span);
    }

    @if $gutter {        
        @return calc(#{$numerator} * ((100% - #{$gutter * ($denominator - 1)}) / #{$denominator}) + (#{($numerator - 1) * $gutter}));
    } @else {
        @return percentage($numerator / $denominator);
    }
}

@function column-width(
    $columns,
    $gutter: false
) {
    @return grid-span($columns, $gutter);
}

@function column-offset-width(
    $columns,
    $gutter: false
) {
    @return grid-span($columns, $gutter);
}

@function row-height($rows...) {
    // This is (currently) the same result as column-width
    @return column-width($rows...);
}

@function pow($number, $exp) {
    $value: 1;
    
    @if $exp > 0 {
        // If the exponent is positive, multiply.
        @for $i from 1 through $exp {
           $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        // If the exponent is negative, divide.
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }

    @return $value;
}

