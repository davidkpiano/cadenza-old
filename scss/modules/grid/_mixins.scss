////
/// Grid Module
/// @group grid
/// @author David Khourshid
////

/// Grid Component Mixin
/// 
/// Defines a grid element in the grid system.
/// @param {string} $display (block)
@mixin grid($display: block) {
	box-sizing: border-box;
	@include clearfix;

	margin: 0;
	display: $display;
	position: relative;
}

// Row Component Mixin
// 
// Defines a row in the grid system
@mixin _row($display: block) {
	@include grid($display);
	width: 100%;
	// clear: both;
}

/// Creates a column grid component.
/// 
/// @param {number | list | string} $columns - width span of column, passed to `grid-span` function
/// @param {string} $media - media query passed to `mq` mixin
/// @param {number | list | string} $offset - offset width span of column, passed to `grid-span` function
/// @param {number | boolean} $gutter - inner gutter width between adjacent columns
/// @param {boolean} $extend (true) - extend %column outside of media queries?
@mixin column(
	$columns,
	$media: all, 
	$offset: false,
	$gutter: false,
	$extend: true
) {
	@include mq($media) {
		@if $extend {
			@at-root (without: media) {
				@extend %column;
			}
		}

		@if $columns {
			width: grid-span(
					$columns,
					$gutter: $gutter
				) !important;
		}

		@if $gutter {
			&:not(:last-child) {
				margin-right: $gutter;
			}
		}

		@if $offset {
			margin-left: grid-span(
					$columns,
					$gutter: $grid-column-gutter
				);
		}
	}
}

// Column Layout Mixin
// 
// Specifies the width of each respective child element
// @param (list) $widths: either a 1D or 2D list
@mixin column-layout(
	$column-widths,
	$media: false,
	$display: block
) {
	$fill-selector: false;
	$total-width: 0px;

	@include clearfix;

	@include mq($media) {
		@for $i from 1 through length($column-widths) {
			$column-width: nth($column-widths, $i);
			$width: nth($column-width, 1);
			$selector: '>:nth-child(#{$i})';

			@if length($column-width) == 2 {
				$width: nth($column-width, 2);
				$selector: nth($column-width, 1);
			}

			@if $width == 'fill' {
				$fill-selector: $selector;
			} @else {
				$total-width: $total-width + ' + ' + column-width($width);

				#{$selector} {
					@include _column($display);

					width: column-width($width);
				}
			}
		}

		@if $fill-selector {
			#{$fill-selector} {
				@include _column($display);

				width: calc(100% - (#{$total-width}));
			}
		}
	}
}

// Row Mixin
// 
// Generates a row with the given height
// @param (int) $rows
// @param (str) $media
// @param (int) $offset
// @param (str) $position
@mixin row(
	$rows,
	$media: false,
	$offset: false,
	$position: false,
	$gutter: false
) {
	@include mq($media) {
		height: row-height($rows, $gutter: $gutter) !important;

		@if $gutter {
			margin-bottom: $gutter;
		}
	}
}

// Row Layout Mixin
// 
// Specifies the height of each respective child element
// @param (list) $widths: either a 1D or 2D list
@mixin row-layout(
	$row-heights,
	$media: false
) {
	$fill-selector: false;
	$total-height: 0px;

	@include mq($media) {
		@for $i from 1 through length($row-heights) {
			$row-height: nth($row-heights, $i);
			$height: nth($row-height, 1);
			$selector: '>:nth-child(#{$i})';

			@if length($row-height) == 2 {
				$height: nth($row-height, 2);
				$selector: nth($row-height, 1);
			}

			@if $height == 'fill' {
				$fill-selector: $selector;
			} @else {
				$total-height: $total-height + ' + ' + row-height($height);

				#{$selector} {
					height: row-height($height);
				}
			}
		}

		@if $fill-selector {
			#{$fill-selector} {
				height: calc(100% - (#{$total-height}));
			}
		}
	}
}
