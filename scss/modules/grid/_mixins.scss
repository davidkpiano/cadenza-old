////
/// Grid Module
/// @group grid
/// @author David Khourshid
////

/// Determines the span (length) of a grid component. Possible inputs:
/// - `{list}`: assumed to be a fraction; e.g. `$span: (1, 2)` represents 1/2
/// - `auto` or any `{number}` with unit: passed through and returned as-is
/// - unitless integer `{number}`: number of columns in grid system based on `$grid-columns`
/// - unitless non-integer `{number}`: converted to percentage
/// 
/// @param {list | string | number} $span - desired span of grid component
/// @param {boolean} $gutter (false) - calculate with gutter?
/// @param {number} $grid ($grid-columns) - total columns/rows to use in calculating span
/// @returns {number} span of grid component in explicit (%, px, em, rem) or percent unit
@function grid-span(
    $span,
    $gutter: false,
    $grid: $grid-columns
) {
    $numerator: 1;
    $denominator: 1;

    @if type_of($span) == list {
        $numerator: nth($span, 1);
        $denominator: nth($span, 2);
    } @else if $span == auto or index(('%', 'px', 'em', 'rem'), unit($span)) {
        @return $span;
    } @else if round($span) == $span and unit($span) == '' and $span > 0 {
        $numerator: $span;
        $denominator: $grid;
    } @else {
        @return percentage($span);
    }

    @if $gutter {        
        @return calc(#{$numerator} * ((100% - #{$gutter * ($denominator - 1)}) / #{$denominator}) + (#{($numerator - 1) * $gutter}));
    } @else {
        @return percentage($numerator / $denominator);
    }
}

/// Creates a grid component - applicable to both rows and columns.
/// 
/// @param {string} $display (block) - `block` or `table-cell`
/// @output grid component able to be made into column or row
@mixin grid(
	$display: block
) {
	@include clearfix;
	box-sizing: border-box;
	margin: 0;
	display: $display;
	position: relative;
}

/// Creates a column grid component.
/// 
/// @param {number | list | string} $columns - width span of column, passed to `grid-span` function
/// @param {string} $media - media query passed to `mq` mixin
/// @param {number | list | string} $offset - offset width span of column, passed to `grid-span` function
/// @param {number | boolean} $gutter - inner gutter width between adjacent columns
/// @param {boolean} $extend (true) - extend %column outside of media queries?
/// @output grid column component
/// @see {mixin} grid
@mixin column(
	$columns,
	$media: all, 
	$offset: false,
	$gutter: false,
	$extend: true
) {
	@include mq($media) {
		@include media-extend('%column', $extend);

		@if $columns {
			width: grid-span(
					$columns,
					$gutter: $gutter,
					$grid: $grid-columns
				) !important;
		}

		@if $gutter {
			margin-right: $gutter;
			
            &:last-child { margin-right: 0; }
		}

		@if $offset {
			margin-left: grid-span(
					$columns,
					$gutter: $grid-column-gutter
				);
		}
	}
}

/// Creates a row grid component.
/// 
/// @todo implement `$offset`
/// 
/// @param {number | list | string} $rows - height span of row, passed to `grid-span` function
/// @param {string} $media - media query passed to `mq` mixin
/// @param {number | list | string} $offset - offset height span of row, passed to `grid-span` function
/// @param {number | boolean} $gutter - inner gutter height between adjacent rows
/// @param {boolean} $extend (true) - extend %row outside of media queries?
/// @output grid row component
/// @see {mixin} grid
@mixin row(
	$rows,
	$media: all,
	$offset: false,
	$gutter: false,
	$extend: true
) {
	@include mq($media) {
		@include media-extend('%row', $extend);

		height: grid-span(
				$rows,
				$gutter: $gutter,
				$grid: $grid-rows
			) !important;

		@if $gutter {
			margin-bottom: $gutter;
		}
	}
}