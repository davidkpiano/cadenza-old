//
// Grid Mixins and Functions
// =========================

// Grid Component Mixin
// 
// Defines a grid element in the grid system.
@mixin _grid($display: block) {
	box-sizing: border-box;
	@extend %clearfix;

	margin: 0;
	display: $display;
	position: relative;
}

// Column Component Mixin
// 
// Defines a column in the grid system.
@mixin _column($display: block) {
	@include _grid($display);
	float: left;
	clear: none;
	height: 100%;
}

// Row Component Mixin
// 
// Defines a row in the grid system
@mixin _row($display: block) {
	@include _grid($display);
	width: 100%;
	// clear: both;
}

// Column Mixin
// 
// Generates a column with the given width
// @param (int) $columns
// @param (str) $media
// @param (int) $offset
// @param (str) $position
@mixin column(
	$columns,
	$media: false, 
	$offset: false, 
	$position: false,
	$gutter: false
) {
	@include mq($media) {
		width: column-width($columns, $gutter: $gutter) !important;

		@if $gutter {
			margin-right: $gutter;
		}
	}
}

// Column Layout Mixin
// 
// Specifies the width of each respective child element
// @param (list) $widths: either a 1D or 2D list
@mixin column-layout(
	$column-widths,
	$media: false,
	$display: block
) {
	$fill-selector: false;
	$total-width: 0px;

	@extend %clearfix;

	@include mq($media) {
		@for $i from 1 through length($column-widths) {
			$column-width: nth($column-widths, $i);
			$width: nth($column-width, 1);
			$selector: '>:nth-child(#{$i})';

			@if length($column-width) == 2 {
				$width: nth($column-width, 2);
				$selector: nth($column-width, 1);
			}

			@if $width == 'fill' {
				$fill-selector: $selector;
			} @else {
				$total-width: $total-width + ' + ' + column-width($width);

				#{$selector} {
					@include _column($display);

					width: column-width($width);
				}
			}
		}

		@if $fill-selector {
			#{$fill-selector} {
				@include _column($display);

				width: calc(100% - (#{$total-width}));
			}
		}
	}
}

// Row Mixin
// 
// Generates a row with the given height
// @param (int) $rows
// @param (str) $media
// @param (int) $offset
// @param (str) $position
@mixin row(
	$rows,
	$media: false,
	$offset: false,
	$position: false,
	$gutter: false
) {
	@include mq($media) {
		height: row-height($rows, $gutter: $gutter) !important;

		@if $gutter {
			margin-bottom: $gutter;
		}
	}
}

// Row Layout Mixin
// 
// Specifies the height of each respective child element
// @param (list) $widths: either a 1D or 2D list
@mixin row-layout(
	$row-heights,
	$media: false
) {
	$fill-selector: false;
	$total-height: 0px;

	@include mq($media) {
		@for $i from 1 through length($row-heights) {
			$row-height: nth($row-heights, $i);
			$height: nth($row-height, 1);
			$selector: '>:nth-child(#{$i})';

			@if length($row-height) == 2 {
				$height: nth($row-height, 2);
				$selector: nth($row-height, 1);
			}

			@if $height == 'fill' {
				$fill-selector: $selector;
			} @else {
				$total-height: $total-height + ' + ' + row-height($height);

				#{$selector} {
					height: row-height($height);
				}
			}
		}

		@if $fill-selector {
			#{$fill-selector} {
				height: calc(100% - (#{$total-height}));
			}
		}
	}
}
