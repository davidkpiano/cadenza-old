// 
// Grid Components
// ===============

%content, %pad {
    padding: $grid-content-padding;
}

%pad-vertical {
    padding-top: $grid-content-padding;
    padding-bottom: $grid-content-padding;
}

%pad-horizontal {
    padding-left: $grid-content-padding;
    padding-right: $grid-content-padding;
}

%pad-small {
	padding: $grid-content-padding-small;
}

%pad-vertical-small {
    padding-top: $grid-content-padding-small;
    padding-bottom: $grid-content-padding-small;
}

%pad-horizontal-small {
    padding-left: $grid-content-padding-small;
    padding-right: $grid-content-padding-small;
}

%pad-large {
	padding: $grid-content-padding-large;
}

%pad-vertical-large {
    padding-top: $grid-content-padding-large;
    padding-bottom: $grid-content-padding-large;
}

%pad-horizontal-large {
    padding-left: $grid-content-padding-large;
    padding-right: $grid-content-padding-large;
}

%pad-none {
	padding: 0 !important;
}

%pad-vertical-none {
	padding-top: 0 !important;
	padding-bottom: 0 !important;
}

%pad-horizontal-none {
	padding-left: 0 !important;
	padding-right: 0 !important;
}

// Shared Grid Components
%grid { @include _grid(); }

// Horizontal Grid Components
%column { @include _column(); }

@for $i from 1 through $grid-columns {
	$fraction-value: if($i / $grid-columns == 1, 100%, $i / $grid-columns);

	$grid-column-fractions: map_merge($grid-column-fractions, ($i: ($i, $grid-columns))) !global;
}

@for $i from 1 through $grid-rows {
	$fraction-value: if($i / $grid-rows == 1, 100%, $i / $grid-rows);

	$grid-row-fractions: map_merge($grid-row-fractions, ($i: ($i, $grid-rows))) !global;
}

@function round-dcr($num) {
	@return round($num);
}

@each $mq in $grid-column-mqs {
	@include mq($mq) {
		$suffix: if($mq == 'all', '', -#{$mq});

		@each $fraction-key, $fraction-value in $grid-column-fractions {
			$is-named-fraction: type_of($fraction-key) == string;

			@if $is-named-fraction
				and fraction-value($fraction-value, $grid-columns) == round(fraction-value($fraction-value, $grid-columns)) {
				%column-#{$fraction-key}#{$suffix} { @extend %column-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%column-offset-#{$fraction-key}#{$suffix} { @extend %column-offset-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%column-gutter-#{$fraction-key}#{$suffix} { @extend %column-gutter-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%column-gutter-offset-#{$fraction-key}#{$suffix} { @extend %column-gutter-offset-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%column-push-#{$fraction-key}#{$suffix} { @extend %column-push-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%column-pull-#{$fraction-key}#{$suffix} { @extend %column-pull-#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

			} @else {
				%column-#{$fraction-key}#{$suffix} { @include column($fraction-value); }

				%column-offset-#{$fraction-key}#{$suffix} { margin-left: column-offset-width($fraction-value); }

				%column-gutter-#{$fraction-key}#{$suffix} {
					@include column($fraction-value, $gutter: $grid-column-gutter);
				}

				%column-gutter-offset-#{$fraction-key}#{$suffix} {
					margin-left: column-offset-width($fraction-value, $gutter: $grid-column-gutter);
				}

				%column-push-#{$fraction-key}#{$suffix} {
					@if $fraction-value == 0 { left: auto; }
					@else { left: column-width($fraction-value); }
				}

				%column-pull-#{$fraction-key}#{$suffix} {
					@if $fraction-value == 0 { right: auto; }
					@else { right: column-width($fraction-value); }
				}
			}

			@if is-integer(fraction-inverse($fraction-value)) {
				$fraction-inverse: fraction-inverse($fraction-value);

				%columns-#{$fraction-key} {
					&#{$suffix} > * {
						@extend %column-#{$fraction-key}#{$suffix};
						height: auto;

						&:nth-child(n+1) {
							clear: none;
						}

						&:nth-child(#{$fraction-inverse}n+1) {
							clear: left;
						}
					}

					&-border#{$suffix} > * {
						&:not(:nth-child(#{$fraction-inverse}n + 1)) {
							border-left-width: 0 !important;
						}

						&:nth-child(n + #{$fraction-inverse}) {
							border-top-width: 0 !important;
						}
					}
				}

				%columns-gutter-#{$fraction-key}#{$suffix} > * {
					&, &:nth-child(n) {				
						@extend %column-gutter-#{$fraction-key}#{$suffix};
						margin-bottom: $grid-column-gutter;
						height: auto;
					}

					&:nth-child(n+1) {
						clear: none;
					}

					&:nth-child(#{$fraction-inverse}n + 1) {
						clear: left;
					}

					&:nth-child(#{$fraction-inverse}n) {
						margin-right: 0;
					}
				}
			}
		}

		%column-left#{$suffix}, %columns-left#{$suffix} > * { 
			float: left;
		}

		%column-right#{$suffix}, %columns-right#{$suffix} > * {
			float: right;
		}

		%column-center#{$suffix}, %columns-center#{$suffix} > * { 
			margin-left: auto; 
			margin-right: auto;
			float: none;
		}

		%column-auto#{$suffix}, %columns-auto#{$suffix} > * {
			height: auto !important;
		}
	}
}

// Vertical Grid Components
%row { @include _row(); }

@each $mq in $grid-row-mqs {
	@include mq($mq) {
		$suffix: -#{$mq};
		@if $mq == 'all' { $suffix: ''; }

		@each $fraction-key, $fraction-value in $grid-row-fractions {
			$is-named-fraction: type_of($fraction-key) == string;

			@if $is-named-fraction
				and fraction-value($fraction-value, $grid-rows) == round(fraction-value($fraction-value, $grid-rows)) {
				%row-#{$fraction-key}#{$suffix} { @extend %row-#{fraction-value($fraction-value, $grid-rows)}#{$suffix}; }

				// %row-offset-#{$fraction-key}#{$suffix} { @extend %row-offset-#{fraction-value($fraction-value, $grid-rows)}#{suffix}; }

				%row-gutter-#{$fraction-key}#{$suffix} { @extend %row-gutter-#{fraction-value($fraction-value, $grid-rows)}#{$suffix}; }

				// %row-gutter-offset#{$fraction-key}#{$suffix} { @extend %row-gutter-offset#{fraction-value($fraction-value, $grid-columns)}#{$suffix}; }

				%row-push-#{$fraction-key}#{$suffix} { @extend %row-push-#{fraction-value($fraction-value, $grid-rows)}#{$suffix}; }

				%row-pull-#{$fraction-key}#{$suffix} { @extend %row-pull-#{fraction-value($fraction-value, $grid-rows)}#{$suffix}; }
			} @else {
				%row-#{$fraction-key}#{$suffix} { @include row($fraction-value); }

				// %row-offset-#{$fraction-key}#{$suffix} { margin-left: row-offset-width($fraction-value); }

				%row-gutter-#{$fraction-key}#{$suffix} {
					@include row($fraction-value, $gutter: $grid-row-gutter);
				}

				// %row-gutter-offset#{$fraction-key}#{$suffix} {
				// 	margin-left: row-offset-width($fraction-value, $gutter: $grid-row-gutter);
				// }

				%row-push-#{$fraction-key}#{$suffix} {
					top: grid-span($fraction-value);
				}

				%row-pull-#{$fraction-key}#{$suffix} {
					bottom: grid-span($fraction-value);
				}
			}

			%rows-gutter-#{$fraction-key}#{$suffix} > * {
				&, &:nth-child(n) {
					@extend %row-gutter-#{$fraction-key}#{$suffix};
				}
			}
		}

		%row-bottom#{$suffix}, %rows-bottom#{$suffix} > * { 
			position: absolute;
			bottom: 0;
			left: 0;
		}

		%row-top#{$suffix}, %rows-top#{$suffix} > * {
			// TODO - see if necessary
		}

		%row-center#{$suffix}, %rows-center#{$suffix} > * { 
			top: 50%;
			@include transform(translateY(-50%));
		}
	}
}

@each $mq in $grid-stack-mqs {
	@include mq($mq) {
		$suffix: -#{$mq};
		@if $mq == 'all' { $suffix: ''; }

		%stack#{$suffix} {
			display: block;
			float: none;
			width: 100% !important;
			height: auto;
		}
	}
}