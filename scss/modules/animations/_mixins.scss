// 
// Animations Mixins and Functions
// ===============================

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@mixin animation(
    $name,
    $duration: $animation-duration,
    $direction: default,
    $delay: default,
    $iteration-count: default,
    $play-state: default,
    $timing-function: default,
    $fill-mode: default,
    $is-3d: false
) {
    @extend %animation !optional;

    @if $is-3d {
        @extend %animation-3d;
    }

    @include animation-name($name);

    @if $duration != default {
        @include animation-duration($duration);
    }

    @if $direction != default {
        @include animation-direction($direction);
    }

    @if $delay != default {
        @include animation-delay($delay);
    }

    @if $iteration-count != default {
        @include animation-iteration-count($iteration-count);
    }

    @if $play-state != default {
        @include animation-play-state($play-state);
    }

    @if $timing-function != default {
        @include animation-timing-function($timing-function);
    }

    @if $fill-mode != default {
        @include animation-fill-mode($fill-mode);
    }
}

@mixin movement(
    $property: default,
    $selector: $transition-selector,
    $duration: default,
    $timing-function: default,
    $delay: default,
    $parent-hover: true
) {
    @if $property != default { @include transition-property($property); }
    @if $duration != default { @include transition-duration($duration); }
    @if $timing-function != default { @include transition-timing-function($timing-function); }
    @if $delay != default { @include transition-delay($delay); }

    @if $parent-hover {    
        &#{$selector}, %hover-all:hover > & {
            @content;
        }
    } @else {
        &#{$selector} {
            @content;
        }
    }
}

@mixin animate-on(
    $selector: false,
    $name: false,
    $args...
) {
    @include on($self: $selector, $args...) {
        @include animation($name);

        @content;
    }
}

@mixin move-on(
    $selector: false,
    $transitions: false,
    $property: default,
    $duration: default,
    $timing-function: default,
    $delay: default,
    $extend: true,
    $args...
) {
    @if $extend { @extend %transition; }

    @if $property != default { @include transition-property($property); }
    @if $duration != default { @include transition-duration($duration); }
    @if $timing-function != default { @include transition-timing-function($timing-function); }
    @if $delay != default { @include transition-delay($delay); }

    @each $transition in $transitions {
        @extend %transition-#{$transition}-inactive !optional;
    }

    @include on($self: $selector, $args...) {
        @each $transition in $transitions {
            @extend %transition-#{$transition}-active !optional;
        }

        @content;
    }
}

@mixin hover-movement($name) {
    @extend %transition-#{$name};

    &:hover { @extend %transition-#{$name}#{$transition-selector}; }
}

@mixin activate(
	$active-name,
	$inactive-name: $active-name,
	$active-selector: $active-selector,
	$inactive-selector: $inactive-selector,
	$inert-selector: $inert-selector
) {
    @extend %animation-#{$active-name}-inert !optional;

    &#{$inert-selector} {
    	@extend %inert;
    }

    @include animate-on($active-selector, #{$active-name}-active) {
        @extend %active;
    }

    @include animate-on($inactive-selector, #{$inactive-name}-inactive) {
        @extend %inactive;
    }
}

@mixin activate-hover($settings...) {
    $settings: map-merge(keywords($settings), (active-selector: ':hover'));

    @include activate($settings...);
}

@mixin activate-all(
	$active-name,
	$inactive-name: $active-name,
	$selector: $activation-item-selector,
	$active-selector: $active-selector,
	$inactive-selector: $inactive-selector,
	$inert-selector: $inert-selector,
	$is-3d: false
) {
	@if $is-3d {
		@extend %animation-3d;
	}

    &#{$inert-selector} {
    	@extend %inert;
    }

    > #{$selector} {
        @extend %animation-#{$active-name}-inert !optional;


        &#{$active-selector} {
        	@extend %animation-#{$active-name}-active !optional;
        	@extend %active;
        }

        &#{$inactive-selector} {
        	@extend %animation-#{$inactive-name}-inactive !optional;
        	@extend %inactive;
        }
    }
}

@mixin compose($tempo, $beat, $parts: (solo)) {
    $_performance-tempo: $tempo !global;
    $_performance-beat: $beat !global;
    $_performance-beats: 0 !global;
    $_performance-marker: 0 !global;
    $_performance-harmony: false !global;
    $_performance-initialized: false !global;
    $_performance-part: solo !global;

    %temp {
        @content;
    }
    
    $_performance-initialized: true !global;

    @each $part in $parts {
        $_performance-part: $part !global;

        @include keyframes($part) {
            @content;
        }
    }

    @include assign-part();
}

@mixin note($duration: $_performance-beat, $part: solo) {
    $duration: if($_performance-harmony, $_performance-harmony, $duration);

    @if $_performance-initialized {
        $keyframe: percentage(($_performance-marker) / $_performance-beats) % 100;
        $_performance-marker: if($_performance-harmony, $_performance-marker, $_performance-marker + ($duration / $_performance-beat)) !global;

        @if $part == $_performance-part {
            #{$keyframe} { @content; }
        } @else if not $_performance-harmony {
            // #{$keyframe} {
            //     left: 0;
            //     top: 0;
            //     background: inherit;
            // }
        }
    } @else if not $_performance-harmony {
        $_performance-beats: $_performance-beats + ($duration / $_performance-beat) !global;
    }
}

@mixin harmony($duration) {
    $_performance-harmony: $duration !global;

    @content;

    @if $_performance-initialized {
        $_performance-marker: $_performance-marker + ($duration / $_performance-beat) !global;
    } @else {
        $_performance-beats: $_performance-beats + ($duration / $_performance-beat) !global;
    }


    $_performance-harmony: false !global;
}

@mixin loop($iterations: 1) {
    @for $i from 1 through $iterations {
        @content;
    }
}

@mixin assign-part($part: solo) {
    & {
        -webkit-animation-duration: #{(60 * $_performance-beats) / $_performance-tempo}s;
        -webkit-animation-name: $part;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: step-end;
        // -webkit-animation-timing-function: ease-in-out;
    }
}

// .edm {
//     $lp-parts: (lp-1-1, lp-1-2, lp-1-3, lp-1-4, lp-1-5, lp-1-6, lp-1-7, lp-1-8, lp-2-1, lp-2-2, lp-2-3, lp-2-4, lp-2-5, lp-2-6, lp-2-7, lp-2-8, lp-3-1, lp-3-2, lp-3-3, lp-3-4, lp-3-5, lp-3-6, lp-3-7, lp-3-8, lp-4-1, lp-4-2, lp-4-3, lp-4-4, lp-4-5, lp-4-6, lp-4-7, lp-4-8, lp-5-1, lp-5-2, lp-5-3, lp-5-4, lp-5-5, lp-5-6, lp-5-7, lp-5-8, lp-6-1, lp-6-2, lp-6-3, lp-6-4, lp-6-5, lp-6-6, lp-6-7, lp-6-8, lp-7-1, lp-7-2, lp-7-3, lp-7-4, lp-7-5, lp-7-6, lp-7-7, lp-7-8, lp-8-1, lp-8-2, lp-8-3, lp-8-4, lp-8-5, lp-8-6, lp-8-7, lp-8-8);

//     @function lp($y, $x, $direction: false) {
//         @if not $direction { @return lp-#{$y}-#{$x}; }
//         @else if $direction == n { @return lp-#{$y - 1}-#{$x}; }
//         @else if $direction == s { @return lp-#{$y + 1}-#{$x}; }
//         @else if $direction == e { @return lp-#{$y}-#{$x + 1}; }
//         @else if $direction == w { @return lp-#{$y}-#{$x - 1}; }
//         @else if $direction == ne { @return lp-#{$y - 1}-#{$x + 1}; }
//         @else if $direction == nw { @return lp-#{$y - 1}-#{$x - 1}; }
//         @else if $direction == se { @return lp-#{$y + 1}-#{$x + 1}; }
//         @else if $direction == sw { @return lp-#{$y + 1}-#{$x 1 1}; }
//     }

//     @mixin blast($y, $x, $direction, $duration: 1/16) {
//         $dx: 0; $dy: 0;

//         @if $direction == n { $dy: -1; }
//         @else if $direction == s { $dy: 1; }
//         @else if $direction == e { $dx: 1; }
//         @else if $direction == w { $dy: -1; }

//         @for $i from 0 through 8 {
//             @include harmony($duration) {            
//                 @include note($part: lp($y + ($i * $dy), $x + ($i * $dx))) {
//                     background: green;
//                 }
//                 @include note($part: lp($y + (($i - 1) * $dy), $x + (($i - 1) * $dx))) {
//                     background: gray;
//                 }
//             }
//         }
//     }

//     @mixin z1($y, $x) {
//         @include harmony(1/2) {}
//         @include harmony(1/8) {
//             @include note($part: lp($y, $x)) { background: red; }
//             @include note($part: lp($y, $x, e)) { background: orange; }
//         }
//         @include harmony(1/8) {
//             @include note($part: lp($y, $x, n)) { background: red; }
//             @include note($part: lp($y, $x, ne)) { background: orange; }
//         }
//         @include note(1/4, lp($y - 2, $x + 1)) { background: red; }
//         @include harmony(1/4) {
//             @include note($part: lp($y - 2, $x + 2)) { background: red; }
//             @include note($part: lp($y - 1, $x + 2)) { background: orange; }
//         }
//         @include note(1/8, lp($y - 1, $x + 3)) { background: red; }
//         @include harmony(1/8) {
//             @include note($part: lp($y, $x + 3)) { background: red; }
//             @include note($part: lp($y, $x + 2)) { background: orange; }
//         }
//         @include note(1/4, lp($y + 1, $x + 2)) { background: red; }
//         @include note(1/4, lp($y + 1, $x + 1)) { background: red; }
//     }

//     @include compose($tempo: 130, $beat: 1/4, $parts: $lp-parts) {
//         @include z1(3, 5);
//         @include z1(7, 1);
//         @include blast(1, 1, e);
//     }

//     // @include compose($tempo: 130, $beat: 1/4, $parts: (lp-5-1, lp-5-2, lp-5-3, lp-5-4, lp-5-5, lp-5-6, lp-5-7, lp-5-8)) {
//     //     @for $i from 1 through 8 {
//     //         @include note(1/4, lp-5-#{$i}) { background: green; }
//     //     }
//     // }

//     @each $part in $lp-parts {
//         .#{$part} {
//             @include assign-part($part);
//         }
//     }
// }
