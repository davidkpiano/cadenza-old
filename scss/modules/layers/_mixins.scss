// 
// Layers Mixins and Functions
// ===========================

@mixin drawer(
    $width: 100%,
    $height: 100%,
    $position: left,
    $active-selector: $transition-selector,
    $push: false,
    $peek-width: 3rem,
    $mq: all,
    $animation: 'slideLeft',
    $extend: true
) {
    $push-translation: false;
    $drawer-width: column-width($width);
    $drawer-height: row-height($height);

    @if $extend {    
        @extend %drawer;
        @extend %drawer-#{$position} !optional;
    }    

    @include mq($mq) {
        &, &#{$active-selector} {
            // @include animation(#{$animation}-inactive);
            position: absolute !important;
            margin: 0;
            width: $drawer-width !important;
            height: $drawer-height !important;
        }

        @if $push {
            $peek-width: if($peek-width, $peek-width, 0rem);

            &#{$active-selector} {
                // @include animation(#{$animation}-active);
                @if $position == left {
                    $push-translation: translateX(calc(#{$drawer-width} - #{$peek-width}));
                } @else if $position == right {
                    $push-translation: translateX(calc(-#{$drawer-width} + #{$peek-width}));
                } @else if $position == top {
                    $push-translation: translateY($drawer-height);
                } @else if $position == bottom {
                    $push-translation: translateY(-$drawer-height);
                }

                ~ * {
                    @include transform($push-translation);
                }
            }

            @if $peek-width > 0 {            
                + * {
                    max-width: calc(100% - #{$peek-width});
                    #{$position}: $peek-width;
                }
            }
        }
    }
}

@mixin parallax(
    $distance,
    $perspective: $parallax-perspective
) {
    transform: translateZ($perspective * $distance) scale(-$distance + 1);
    z-index: $distance * 10;
}