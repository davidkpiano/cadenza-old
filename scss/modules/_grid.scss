//
// Global Grid Styles
// ==================

%content {
    padding: $grid-content-padding;
}
%grid {
    @extend %border-box;
    @extend %clearfix;

    margin: 0;
    display: block;
    position: relative;

    &.content { @extend %content; }
}
%column {
    @extend %grid;
    float: left;
    clear: none;
    height: 100%;
}
%columns-gutter {
    &, > [class*="col-"], > .col {
        padding-left: $grid-column-gutter / 2;
        padding-right: $grid-column-gutter / 2;  
    }
}
%row {
    @extend %grid;
    width: 100%;
    clear: both;
}
%rows-gutter {
    &, > [class*="row-"], > .row {
        padding-top: $grid-row-gutter / 2;
        padding-bottom: $grid-row-gutter / 2;  
    }
}

.content {
    @extend %content;
}

//
// Horizontal Grid System
// ======================

@mixin columns($columns, $flex: true) {
    width: ($columns / $grid-columns) * 100%;

    @if $flex {    
        + .col-flex {
            width: (1 - ($columns / $grid-columns)) * 100%;
        }
    }
}

@mixin columnsOffset($columns) {
    margin-left: ($columns / $grid-columns * 100%);
}

@mixin columnsPosition($position) {
    @if $position == left {
        // Might be unnecessary
        float: left;
    } @else if $position == right {
        float: right;
        // clear: left;
    } @else if $position == center {
        margin-left: auto;
        margin-right: auto;
        float: none;
    }
}

@mixin horizontalGridSystem($suffix: "") {
    $suffix-str: -#{$suffix} !default;
    @if $suffix == "" { $suffix-str: ""; }

    @for $i from 0 through $grid-columns {
        %cols-#{$i}#{$suffix-str} > .col, .cols-#{$i}#{$suffix-str} > .col,
        %col-#{$i}#{$suffix-str}, .col-#{$i}#{$suffix-str} {
            @include columns($i);
        }

        @if $i > 0 and round($grid-columns / $i) == $grid-columns / $i {

            %cols-#{$i}#{$suffix-str} > .col, .cols-#{$i}#{$suffix-str} > .col {
                &:nth-child(n+1) {
                    clear: none;
                }

                &:nth-child(#{$grid-columns / $i}n + 1) {
                    clear: left;
                }
            }
        }

        %col-offset-#{$i}#{$suffix-str}, .col-offset-#{$i}#{$suffix-str} {
            @include columnsOffset($i);
        }    
    }

    @each $position in left, right, center {    
        %col-#{$position}#{$suffix-str}, .col-#{$position}#{$suffix-str} {
            @include columnsPosition($position);
        }
    }

    .col {
        width: auto;
    }

    .col-inline {
        height: auto;
    }
}

#{$grid-column-selector} {
    @extend %column;

    &.rows-gutter {
        @extend %rows-gutter;
    }
}

//
// Vertical Grid System
// ====================

@mixin rows($rows, $gutter: false) {
    $_height: ($rows / $grid-rows) * 100%;

    @if $gutter {
        height: calc(#{$_height} - (#{$gutter} * 2));
        margin-top: $gutter;
        margin-bottom: $gutter;
    } @else {
        height: $_height;
    }

    + .row-flex {
        height: (1 - ($rows / $grid-rows)) * 100%;
    }
}

@mixin rowsOffset($rows) {
    // TODO: use calc? try to use margin
    top: ($rows / $grid-rows) * 100%;
}

@mixin rowsPosition($position) {
    @if $position == top {
        // todo... (see if necessary)
    } @else if $position == center {
        // @extend %valign-center;
    } @else if $position == bottom {
        position: absolute;
        bottom: 0;
        left: 0;
    }
}

@mixin verticalGridSystem($suffix: "") {
    $suffix-str: -#{$suffix} !default;
    @if $suffix == "" { $suffix-str: ""; }

    @for $i from 0 through $grid-rows {
        %rows-#{$i}#{$suffix-str} > .row, .rows-#{$i}#{$suffix-str} > .row,
        %row-#{$i}#{$suffix-str}, .row-#{$i}#{$suffix-str} {
            @include rows($i);
        }

        %row-offset-#{$i}#{$suffix-str}, .row-offset-#{$i}#{$suffix-str} {
            @include rowsOffset($i);
        }
    }

    @each $position in top, bottom, center {    
        %row-#{$position}#{$suffix-str}, .row-#{$position}#{$suffix-str} {
            @include rowsPosition($position);
        }
    }

    // TEMPORARY
    .row-center#{$suffix-str} {
        @extend %valign-center;
    }
}

#{$grid-row-selector} {
    @extend %row;

    &.columns-gutter {
        @extend %columns-gutter;
    }
}

//
// Full Grid System
// ================

@mixin gridSystem($suffix: "") {
    @include horizontalGridSystem($suffix);
    @include verticalGridSystem($suffix);
}

@media #{$mq-screen} { @include gridSystem; }
@media #{$mq-small} { @include gridSystem(small); }
@media #{$mq-medium} { @include gridSystem(medium); }
@media #{$mq-large} { @include gridSystem(large); }
@media #{$mq-short} { @include gridSystem(short); }
@media #{$mq-tall} { @include gridSystem(tall); }