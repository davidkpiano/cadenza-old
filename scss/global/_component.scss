

$components: ();
$relationships: ();
$static-component: null;

@function property-mapping($property, $rule) {
    // TODO: parse rule first

    @if function-exists(map-#{$property}) {
        @return call(map-#{$property}, $rule);
    } @else {
        @return ($property: $rule);
    }
}

@mixin rules(
    $definition,
    $selector: &
) {  
    @at-root #{$selector} {    
        @each $property, $rule in $definition {
            $property-rule-map: property-mapping($property, $rule);
            @each $mapped-property, $mapped-rule in $property-rule-map {
                #{$mapped-property}: $mapped-rule;
            }
        }

        @content;
    }
}

@function set-components($component, $definition: ()) {
    $component: if(length($component) == 1, append($component, default), $component);

    $components: set($components, $component, $definition) !global;

    @return null;
}

@function get-components($component) {
    $component: if(length($component) == 1, append($component, default), $component);

    $definition: get($components, $component);

    @return $definition;
}

@mixin define-component($args...) {
    @include component($args...) { @content; }
}

@mixin component(
    $component,
    $definition: false
) {
    $component-string: sl-to-string($component, '-');
    $placeholder: '%#{$component-string}';

    $static-component: $component !global;

    @if $definition {
        $void: set-components($component, $definition) !global;

        @include rules($definition, $placeholder) {
            @content;
        }

        // Relationship placeholder
        @at-root %r-#{$component-string} {
            component: $component;
        }
    } @else {
        $definition: get-components($component);

        @include rules($definition, &) {
            @content;
        }

        @extend #{relationship($component)} !optional;
    }
}

@mixin define-variant(
    $variant,
    $definition,
    $component: $static-component
) {
    @include define-component(
        append($component, $variant),
        $definition
    );

    $static-component: $component !global;
}

@mixin define-relationship(
    $target,
    $subject: $static-component,
    $relationship: 'descendant'
) {

    $target-placeholder: relationship($target...);
    $subject-placeholder: relationship($subject...);
    $relationship-map: (
        'descendant': '#{$subject-placeholder} #{$target-placeholder}',
        'child': '#{$subject-placeholder} > #{$target-placeholder}',
        'adjacent': '#{$subject-placeholder} + #{$target-placeholder}',
        'sibling': '#{$subject-placeholder} ~ #{$target-placeholder}',
        'cousin': '#{$subject-placeholder} ~ * #{$target-placeholder}',
    );

    @at-root #{map-get($relationship-map, $relationship)} {
        @content;
    }
}

@function component(
    $component,
    $variant: null
) {
    $component: if($variant, append($component, $variant), $component);
    $component-string: sl-to-string($component, '-');

    @return '%#{$component-string}';
}

@function relationship(
    $component
) {
    $component: if(length($component) == 1, append($component, default), $component);
    $component-string: sl-to-string($component, '-');

    @return '%r-#{$component-string}';
}
